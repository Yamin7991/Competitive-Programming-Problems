#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'
#define pf printf
#define sf scanf

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007
//#define harmonic(n) 0.57721566490153286l+log(n)

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;

inline bool checkBit(ll n, int i) { return n&(1LL<<i); }
inline ll setBit(ll n, int i) { return n|(1LL<<i);; }
inline ll resetBit(ll n, int i) { return n&(~(1LL<<i)); }

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};
//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};

inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

/*
bool seive[1010000];
vi prime;

void seiveGen(int limit) {
    limit += 100;
    int sqrtn = sqrt(limit);
    for(int i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(int j = i * i; j < limit; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }
    prime.PB(2);
    for(int i = 3; i < limit; i += 2) {
            if(!seive[i>>1]) prime.PB(i);
    }
}
*/

//
//debug
#ifdef yamin
template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
            return os << "(" << p.first << ", " << p.second << ")";
}

template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
            os << "{";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "}";
}

template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename T >
ostream &operator << ( ostream & os, const multiset< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << it -> first << " = " << it -> second ;
                                            }
                    return os << "]";
}

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)

clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)

void faltu () {
            cerr << endl;
}

template <typename T>
void faltu( T a[], int n ) {
            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';
                cerr << endl;
}

template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {
            cerr << arg << ' ';
                faltu(rest...);
}
#else
#define dbg(args...)
#endif // yamin

const int maxn = 1e5 + 100, k = 18;
int par[maxn][k], lev[maxn], jobidx[maxn], t[maxn], x[maxn], y[maxn], dsu[maxn], vis[maxn];
vi adjList[maxn], topsort;
vii joblist[maxn];

int findSet(int p) {
	if(dsu[p] != p) return dsu[p] = findSet(dsu[p]);
	return p;
}

void dfs1(int u) {
	vis[u] = true;
	for(auto v : adjList[u]) if(!vis[v]) dfs1(v);
	topsort.PB(u);
}

void dfs(int u, int p) {
	par[u][0] = p;
	lev[u] = lev[p] + 1;
	for(auto v : adjList[u]) {
		if(v != p) dfs(v, u);
	}
}

void lca_init(int n) {
	for(int i = 1; i < k; ++i) {
		for(int j = 1; j <= n; ++j) {
			par[j][i] = par[par[j][i-1]][i-1];
		}
	}
}

bool compatible(int p, int q) {
	if(lev[p] < lev[q]) return false;
	if(findSet(p) != findSet(q)) return false;
	for(int i = k-1; lev[p] > lev[q]; --i) {
		if(lev[par[p][i]] >= lev[q]) p = par[p][i];
	}
	return (p == q);
}

int main() {
	optimize();

	int n, m, doc = 0; cin >> n >> m;
	for(int i = 0; i < m; ++i) {
		cin >> t[i] >> x[i];
		if(t[i] != 2) cin >> y[i];
		if(t[i] == 1) {
			adjList[y[i]].PB(x[i]);
		}
		if(t[i] == 2) {
			jobidx[++doc] = i;
		}
		if(t[i] == 3) {
			joblist[jobidx[y[i]]].PB(pii(x[i], i));
		}
	}
	for(int i = 1; i <= n; ++i) if(!vis[i]) dfs1(i);
	for(int i = topsort.size()-1; i >= 0; --i) if(!par[topsort[i]][0]) dfs(topsort[i], 0);
	lca_init(n);
	vector<pair<int, string> > ans;
	for(int i = 1; i <= n; ++i) dsu[i] = i;
	for(int i = 0; i < m; ++i) {
		if(t[i] == 1) {
			dsu[findSet(x[i])] = findSet(y[i]);
		}
		else if(t[i] == 2) {
			for(auto it : joblist[i]) {
				if(compatible(x[i], it.F)) ans.PB(MP(it.S, "YES"));
				else ans.PB(MP(it.S, "NO"));
			}
		}
	}
	sort(ans.begin(), ans.end());
	for(auto it : ans) cout << it.S << endl;
	return 0;
}
